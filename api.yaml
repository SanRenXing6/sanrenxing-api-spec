openapi: 3.0.3
info:
  title: Swagger SanRenXing - OpenAPI 3.0
  description: |-
    This is a service/platform to help you match someone who can provide you with useful suggestions and book a online call. Since we all have different skills and experience, we can learn from each other for a specific field. 
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://three.swagger.io/api/v3
tags:
  - name: user
    description: Users in this platform
  - name: profile
    description: Profiles of the users
  - name: feedback
    description: Feedback from one person to another
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /profile:
    post:
      tags:
        - profile
      summary: Create profile
      operationId: createProfile
      requestBody:
        description: Created profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/xml:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
  /profile/{userId}:
    get:
      tags:
        - profile
      summary: Get profile by user id
      description: ''
      operationId: getProfileByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid user id supplied
        '404':
          description: Profile not found
    put:
      tags:
        - profile
      summary: Update profile
      operationId: updateProfile
      parameters:
        - name: userId
          in: path
          description: user id that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/xml:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - profile
      summary: Delete profile
      operationId: deleteProfile
      parameters:
        - name: userId
          in: path
          description: The profile that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid user id supplied
        '404':
          description: Profile not found
  /profile/findBySkill:
    get:
      tags:
        - profile
      summary: Find profile by specific skill 
      operationId: findProfilesBySkill
      parameters:
        - name: skill
          in: query
          description: Skill set values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid skill value
  /feedback:
    post:
      tags:
        - feedback
      summary: Create feedback
      operationId: createFeedback
      requestBody:
        description: Created feedback object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
          application/xml:
            schema:
              $ref: '#/components/schemas/Feedback'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
            application/xml:
              schema:
                $ref: '#/components/schemas/Feedback'
  /feedback/{id}:
    get:
      tags:
        - feedback
      summary: Get feedback by feedback id
      description: ''
      operationId: getFeedbackById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Feedback'
        '400':
          description: Invalid feedback id supplied
        '404':
          description: Feedback not found
    put:
      tags:
        - feedback
      summary: Update feedback
      operationId: updateFeedback
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent feedback
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
          application/xml:
            schema:
              $ref: '#/components/schemas/Feedback'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - feedback
      summary: Delete feedback
      operationId: deleteFeedback
      parameters:
        - name: id
          in: path
          description: The feedback that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid feedback id supplied
        '404':
          description: Feedback not found
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        userId:
          type: integer
          format: int64
          example: 100000
        description:
          type: string
          example: 'Describe about your self'
        generalRate:
          type: integer
          format: int32
          example: 100
        needs:
          type: string
          example: 'Describe what do you need'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        feedbacks:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
      xml:
        name: profile
    Skill:
      type: object
      properties:
        name:
          type: string
          example: 'coding'
        rate:
          type: integer
          format: int32
          example: 5
      xml:
        name: profile
    Feedback:
      type: object
      properties:
        id:
          type: integer
          description: 'unique id for the feedback'
          format: int64
          example: 100000
        from:
          type: integer
          description: 'user id for who leave the feedback'
          format: int64
          example: 100000
        to: 
          type: integer
          description: 'user id for who the feedback is written to'
          format: int64
          example: 100000
        rate:
          type: integer
          description: 'the rate for the phone call, out of 5'
          format: int32
        comment:
          type: string
          example: 'so glad to talk with him/her'
         
    